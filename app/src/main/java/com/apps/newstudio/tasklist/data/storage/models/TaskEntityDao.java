package com.apps.newstudio.tasklist.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASKS".
*/
public class TaskEntityDao extends AbstractDao<TaskEntity, Long> {

    public static final String TABLENAME = "TASKS";

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property TaskState = new Property(2, int.class, "taskState", false, "TASK_STATE");
        public final static Property CategoryId = new Property(3, int.class, "categoryId", false, "CATEGORY_ID");
        public final static Property Day = new Property(4, int.class, "day", false, "DAY");
        public final static Property Month = new Property(5, int.class, "month", false, "MONTH");
        public final static Property Year = new Property(6, int.class, "year", false, "YEAR");
        public final static Property HourBeginning = new Property(7, int.class, "hourBeginning", false, "HOUR_BEGINNING");
        public final static Property MinuteBeginning = new Property(8, int.class, "minuteBeginning", false, "MINUTE_BEGINNING");
        public final static Property HourEnd = new Property(9, int.class, "hourEnd", false, "HOUR_END");
        public final static Property MinuteEnd = new Property(10, int.class, "minuteEnd", false, "MINUTE_END");
        public final static Property AlarmState = new Property(11, int.class, "alarmState", false, "ALARM_STATE");
        public final static Property AlarmHour = new Property(12, int.class, "alarmHour", false, "ALARM_HOUR");
        public final static Property AlarmMinute = new Property(13, int.class, "alarmMinute", false, "ALARM_MINUTE");
    }

    private DaoSession daoSession;


    public TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASKS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"TASK_STATE\" INTEGER NOT NULL ," + // 2: taskState
                "\"CATEGORY_ID\" INTEGER NOT NULL ," + // 3: categoryId
                "\"DAY\" INTEGER NOT NULL ," + // 4: day
                "\"MONTH\" INTEGER NOT NULL ," + // 5: month
                "\"YEAR\" INTEGER NOT NULL ," + // 6: year
                "\"HOUR_BEGINNING\" INTEGER NOT NULL ," + // 7: hourBeginning
                "\"MINUTE_BEGINNING\" INTEGER NOT NULL ," + // 8: minuteBeginning
                "\"HOUR_END\" INTEGER NOT NULL ," + // 9: hourEnd
                "\"MINUTE_END\" INTEGER NOT NULL ," + // 10: minuteEnd
                "\"ALARM_STATE\" INTEGER NOT NULL ," + // 11: alarmState
                "\"ALARM_HOUR\" INTEGER NOT NULL ," + // 12: alarmHour
                "\"ALARM_MINUTE\" INTEGER NOT NULL );"); // 13: alarmMinute
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASKS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getTaskState());
        stmt.bindLong(4, entity.getCategoryId());
        stmt.bindLong(5, entity.getDay());
        stmt.bindLong(6, entity.getMonth());
        stmt.bindLong(7, entity.getYear());
        stmt.bindLong(8, entity.getHourBeginning());
        stmt.bindLong(9, entity.getMinuteBeginning());
        stmt.bindLong(10, entity.getHourEnd());
        stmt.bindLong(11, entity.getMinuteEnd());
        stmt.bindLong(12, entity.getAlarmState());
        stmt.bindLong(13, entity.getAlarmHour());
        stmt.bindLong(14, entity.getAlarmMinute());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
        stmt.bindLong(3, entity.getTaskState());
        stmt.bindLong(4, entity.getCategoryId());
        stmt.bindLong(5, entity.getDay());
        stmt.bindLong(6, entity.getMonth());
        stmt.bindLong(7, entity.getYear());
        stmt.bindLong(8, entity.getHourBeginning());
        stmt.bindLong(9, entity.getMinuteBeginning());
        stmt.bindLong(10, entity.getHourEnd());
        stmt.bindLong(11, entity.getMinuteEnd());
        stmt.bindLong(12, entity.getAlarmState());
        stmt.bindLong(13, entity.getAlarmHour());
        stmt.bindLong(14, entity.getAlarmMinute());
    }

    @Override
    protected final void attachEntity(TaskEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.getInt(offset + 2), // taskState
            cursor.getInt(offset + 3), // categoryId
            cursor.getInt(offset + 4), // day
            cursor.getInt(offset + 5), // month
            cursor.getInt(offset + 6), // year
            cursor.getInt(offset + 7), // hourBeginning
            cursor.getInt(offset + 8), // minuteBeginning
            cursor.getInt(offset + 9), // hourEnd
            cursor.getInt(offset + 10), // minuteEnd
            cursor.getInt(offset + 11), // alarmState
            cursor.getInt(offset + 12), // alarmHour
            cursor.getInt(offset + 13) // alarmMinute
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTaskState(cursor.getInt(offset + 2));
        entity.setCategoryId(cursor.getInt(offset + 3));
        entity.setDay(cursor.getInt(offset + 4));
        entity.setMonth(cursor.getInt(offset + 5));
        entity.setYear(cursor.getInt(offset + 6));
        entity.setHourBeginning(cursor.getInt(offset + 7));
        entity.setMinuteBeginning(cursor.getInt(offset + 8));
        entity.setHourEnd(cursor.getInt(offset + 9));
        entity.setMinuteEnd(cursor.getInt(offset + 10));
        entity.setAlarmState(cursor.getInt(offset + 11));
        entity.setAlarmHour(cursor.getInt(offset + 12));
        entity.setAlarmMinute(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
